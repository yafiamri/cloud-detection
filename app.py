{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPxgf2Z8mmN3qupq/XDOpk9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"qnH4pI00JMPk"},"outputs":[],"source":["# Simpan sebagai app.py\n","import streamlit as st\n","import torch\n","import numpy as np\n","import cv2\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","from ultralytics import YOLO\n","from arsitektur_clouddeeplabv3 import CloudDeepLabV3Plus\n","import albumentations as A\n","from albumentations.pytorch import ToTensorV2\n","\n","# ========== Konfigurasi ==========\n","CLASS_LABELS = ['cumulus', 'altocumulus', 'cirrus', 'clearsky', 'stratocumulus', 'cumulonimbus', 'mixed']\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# ========== Load Model ==========\n","@st.cache_resource\n","def load_models():\n","    seg_model = CloudDeepLabV3Plus().to(device)\n","    seg_model.load_state_dict(torch.load(\"model/clouddeeplabv3_best.pth\", map_location=device))\n","    seg_model.eval()\n","\n","    cls_model = YOLO(\"model/yolov8_cls_best.pt\")\n","    return seg_model, cls_model\n","\n","# ========== Transformasi ==========\n","val_transform = A.Compose([\n","    A.Resize(512, 512),\n","    A.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5)),\n","    ToTensorV2()\n","])\n","\n","# ========== Segmentasi Awan ==========\n","def predict_segmentation(img_pil, model):\n","    image = np.array(img_pil)\n","    transformed = val_transform(image=image)\n","    img_tensor = transformed[\"image\"].unsqueeze(0).to(device)\n","\n","    with torch.no_grad():\n","        output = model(img_tensor)[\"out\"]\n","        mask = (torch.sigmoid(output) > 0.5).squeeze().cpu().numpy()\n","\n","    coverage = 100 * np.count_nonzero(mask) / mask.size\n","    return mask, coverage\n","\n","# ========== Klasifikasi Awan ==========\n","def predict_classification(img_path, model):\n","    result = model.predict(img_path, verbose=False)[0]\n","    pred_idx = result.probs.top1\n","    conf = result.probs.data[pred_idx].item()\n","    return CLASS_LABELS[pred_idx], conf\n","\n","# ========== Interpretasi Cuaca ==========\n","def interpretasi_cuaca(coverage):\n","    if coverage < 10:\n","        return \"Clear\"\n","    elif coverage < 30:\n","        return \"Mostly Clear\"\n","    elif coverage < 70:\n","        return \"Partly Cloudy\"\n","    elif coverage < 90:\n","        return \"Mostly Cloudy\"\n","    else:\n","        return \"Overcast\"\n","\n","# ========== STREAMLIT APP ==========\n","st.set_page_config(page_title=\"Deteksi Awan\", layout=\"wide\")\n","st.title(\"☁️ Sistem Deteksi dan Klasifikasi Awan\")\n","\n","seg_model, cls_model = load_models()\n","\n","uploaded_file = st.file_uploader(\"Unggah gambar langit\", type=[\"jpg\", \"png\", \"jpeg\"])\n","if uploaded_file:\n","    img_pil = Image.open(uploaded_file).convert(\"RGB\")\n","    img_path = f\"temp.jpg\"\n","    img_pil.save(img_path)\n","\n","    mask, coverage = predict_segmentation(img_pil, seg_model)\n","    label, conf = predict_classification(img_path, cls_model)\n","    cuaca = interpretasi_cuaca(coverage)\n","\n","    # Visualisasi\n","    col1, col2, col3 = st.columns(3)\n","    col1.image(img_pil, caption=\"Gambar Asli\", use_column_width=True)\n","    col2.image(mask, caption=f\"Mask Awan\\nTutupan: {coverage:.1f}%\", use_column_width=True)\n","    col3.markdown(f\"### 🌤️ Klasifikasi: **{label}**\")\n","    col3.markdown(f\"**Confidence:** {conf:.1%}\")\n","    col3.markdown(f\"**Kategori Cuaca:** {cuaca}\")"]}]}